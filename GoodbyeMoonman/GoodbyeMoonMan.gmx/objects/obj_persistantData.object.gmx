<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the max height that the player can reach.
m_maxHeight = 100000.0;
m_height = 0.0;
m_scoreList[10] = 0;
m_nameList[10] = 0;

m_playerPos = -1;
m_playerName = "???";

m_repeted = false;

m_launchPower = 0;
m_moonmanWeight = 0;
m_speedJetpack = false;
m_durationJetpack = false;

m_reset = false;

m_deltaTime = 0.0;
m_paused = false;

randomize();

room_goto(rm_start);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape))
    m_paused = !m_paused;

if (m_paused)
{
    m_deltaTime = 0.0;
}
else
{
    m_deltaTime = delta_time;
    m_deltaTime *= 0.000001;
}

if (m_reset)
{
    m_reset = false;
    m_height = 0.0;
    m_playerPos = -1;
    m_playerName = "???";
    m_repeted = false;
}

/*if (keyboard_check(vk_escape))
{
    game_end();
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Saving Name...");

event_user(2);

/*if (m_playerName == "AAA")
{
    show_debug_message("&gt;&gt;&gt;Error receving name.&lt;&lt;&lt;");
    m_playerName = obj_nameEntry.m_entredLettersChar[0] + obj_nameEntry.m_entredLettersChar[1] + obj_nameEntry.m_entredLettersChar[2];
}*/

if (m_playerPos &gt;= 0)
{
    var count = 0;
    
    while (count != m_playerPos)
    {
        m_nameList[count] = m_nameList[count + 1];
    
        count++;
    }
    
    if (m_playerPos == 10)
    {
        m_nameList[9] = m_playerName;
    }
    else
    {
        m_nameList[m_playerPos] = m_playerName;
    }
    
    var count = 0;
    
    while (count &lt; 10)
    {
        show_debug_message("Name " + string(count) + ": " + string(m_nameList[count]));
        count++;
    }
    
    
    var file = file_text_open_write("Names.sav");
    
    var count = 0;
    
    while (count &lt; 10)
    {
        file_text_write_string(file, m_nameList[count]);
        file_text_writeln(file);
        
        count++;
    }
    
    file_text_close(file);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!file_exists("Names.sav"))
{
    show_debug_message("Can't locate names file, creating new file...");
    
    var file = file_text_open_write("Names.sav");
    
    file_text_write_string(file, "CPU");
    file_text_writeln(file);
    file_text_write_string(file, "GPU");
    file_text_writeln(file);
    file_text_write_string(file, "MMZ");
    file_text_writeln(file);
    file_text_write_string(file, "MRC");
    file_text_writeln(file);
    file_text_write_string(file, "AAA");
    file_text_writeln(file);
    file_text_write_string(file, "ABC");
    file_text_writeln(file);
    file_text_write_string(file, "ZXY");
    file_text_writeln(file);
    file_text_write_string(file, "YGO");
    file_text_writeln(file);
    file_text_write_string(file, "CCG");
    file_text_writeln(file);
    file_text_write_string(file, "MMO");
    file_text_writeln(file);
    
    file_text_close(file);
}

show_debug_message("Loading name...");

var LoadFile = file_text_open_read("Names.sav");
    
var count = 0;
    
while (count &lt; 10)
{
    m_nameList[count] = file_text_read_string(LoadFile);
    file_text_readln(LoadFile);
    show_debug_message("Name " + string(count) + ": " + string(m_scoreList[count]));
    count++;
}
    
file_text_close(LoadFile);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Saving score...");

event_user(0);

var count = 0;

while (count &lt; 10)
{
    if (m_height &gt; m_scoreList[count])
    {
        count++;
    }
    else
    {
        count--;
        
        break;
    }
}

m_playerPos = min(count, 10);

if (count &gt;= 0)
{
    
    var count2 = 0;
    
    while (count2 != count)
    {
        m_scoreList[count2] = m_scoreList[count2 + 1];
    
        count2++;
    }
    
    if (count == 10)
    {
        m_scoreList[9] = m_height;
    }
    else
    {
        m_scoreList[count] = m_height;
    }
    
    show_debug_message("Player is at " + string(count));
    
    var count = 0;
    
    while (count &lt; 10)
    {
        show_debug_message("Score " + string(count) + ": " + string(m_scoreList[count]));
        count++;
    }
    
    
    var file = file_text_open_write("Scores.sav");
    
    var count = 0;
    
    while (count &lt; 10)
    {
        file_text_write_string(file, string(m_scoreList[count]));
        file_text_writeln(file);
        
        count++;
    }
    
    
    file_text_close(file);
}

event_user(3);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!file_exists("Scores.sav"))
{
    show_debug_message("ERROR: Can't locate file, creating new file...");
    
    var file = file_text_open_write("Scores.sav");
        
    file_text_write_string(file, "1000");
    file_text_writeln(file);
    file_text_write_string(file, "2000");
    file_text_writeln(file);
    file_text_write_string(file, "3000");
    file_text_writeln(file);
    file_text_write_string(file, "4000");
    file_text_writeln(file);
    file_text_write_string(file, "5000");
    file_text_writeln(file);
    file_text_write_string(file, "6000");
    file_text_writeln(file);
    file_text_write_string(file, "7000");
    file_text_writeln(file);
    file_text_write_string(file, "8000");
    file_text_writeln(file);
    file_text_write_string(file, "9000");
    file_text_writeln(file);
    file_text_write_string(file, "10000");
    file_text_writeln(file);
        
    file_text_close(file);
}

show_debug_message("Loading...");
    
var LoadFile = file_text_open_read("Scores.sav");
        
var count = 0;
        
while (count &lt; 10)
{
    m_scoreList[count] = file_text_read_real(LoadFile);
    show_debug_message("Score " + string(count) + ": " + string(m_scoreList[count]));
    count++;
}
        
file_text_close(LoadFile);

event_user(2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
