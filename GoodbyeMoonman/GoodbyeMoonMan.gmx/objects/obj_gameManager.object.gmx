<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>firstTransition = false;
secondTransition = true;


m_spawnTime = 1.5;
m_timer = m_spawnTime;

m_startGameCountdown = 3.0;
m_preGame = true;



/*m_paralax[4] = 0;

m_paralax[0] = instance_create(0, 0, obj_paralax);

m_paralax[1] = instance_create(0, 0, obj_paralax);
m_paralax[1].m_id = 1;

m_paralax[2] = instance_create(0, -720, obj_paralax);

m_paralax[3] = instance_create(0, -720, obj_paralax);
m_paralax[3].m_id = 1;*/

m_background[0] = instance_create(0, -720,  obj_background);
m_background[1] = instance_create(0, 0,  obj_background);

//Set the initial tile sets of the backgrounds.
m_background[0].image_index = 4;
m_background[1].image_index = 0;

m_goalHeight = 500000.0;
m_spaceHeight = m_goalHeight * 0.3;
m_endGameCountDown = 3.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (m_preGame)
{
    m_startGameCountdown -= obj_persistantData.m_deltaTime;
    
    if (m_startGameCountdown &lt;= 0.0)
    {
        m_preGame = false;
        obj_launcher.m_preActive = false;
        obj_launcher.m_active = true;
    }
}
else if (obj_moonMan.m_active)
{
    m_timer -= obj_persistantData.m_deltaTime;
    
    if (m_timer &lt;= 0.0)
    {        
        m_timer = m_spawnTime;
        
        if (obj_persistantData.m_height &gt; m_spaceHeight + 720)
        {
            if (irandom_range(0, 1) == 0)
            {
                instance_create(0, 0, obj_UFO);
            }
            else
            {
               instance_create(0, 0, obj_satalite); 
            }
            
            if (irandom(2) == 0)
                instance_create(0, 0, obj_spaceman); 
        }
        else
        {
            var roll = irandom_range(0, 2)
        
            if (roll == 0)
                instance_create(0, 0, obj_cloudPro);
            if (roll == 1)
                instance_create(0, 0, obj_airoplane);
            else
               instance_create(0, 0, obj_bird); 
        }
        
        //instance_create(0, 0, obj_cloud);
    }
}

if (obj_persistantData.m_height &gt; m_goalHeight)
{
    obj_moonMan.m_active = false;
    obj_moonMan.m_postVictory = true;
    
    m_endGameCountDown -= obj_persistantData.m_deltaTime;
    
    if (m_endGameCountDown &lt;= 0.0)
    {
        room_goto(rm_nameEntry);
    }
}

if(keyboard_check_pressed(ord("R")))
{
    room_goto(rm_game);
}

//If the moonman is active.
if (obj_moonMan.m_active)
{
    //moves the object down at moonmans velocity on the y axis times by 0.03 to give a 3D effect.
    //m_backgroundVelocity = (obj_moonMan.m_velocityY / obj_interactable.m_maxVel) * 3; 
    //floor(m_backgroundVelocity);
    
    m_background[0].y += (obj_moonMan.m_velocityY * 0.03) * (obj_persistantData.m_deltaTime * 100);
    m_background[1].y += (obj_moonMan.m_velocityY * 0.03) * (obj_persistantData.m_deltaTime * 100);
    
    //floor(m_background[0].y);
    //floor(m_background[1].y);
    
    //for each background.
    for(i = 0; i &lt; 2; i++)
    {
        if(m_background[i].y &gt; 720)
        {
            //move it back above the screen.
            m_background[i].y = -700;
            
            //If the height of the player is greater than space height.
            if(obj_persistantData.m_height &gt; obj_gameManager.m_spaceHeight)
            {
                if(secondTransition == false)
                {
                    secondTransition = true;
                    m_background[i].image_index = 5;
                }
                else if(firstTransition == false)
                {
                    //first transition is set to true so that the transition can only happen once.
                    firstTransition = true;
                    secondTransition = false;
                    m_background[i].image_index = 7;
                }
                else
                {
                    m_background[i].image_index = 6;
                }
            }
            else
            {
                //randomly select image 0 or 1.
                m_background[i].image_index = irandom(1) + 2;
            }
            
        }   
    }
}

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (m_preGame)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fnt_very_big);
    
    if (m_startGameCountdown &gt; 2.0)
    {
        draw_set_colour(c_red);

        draw_text(640, 360, "3");
    }
    else if (m_startGameCountdown &gt; 1.0)
    {
        draw_set_colour(c_yellow);

        draw_text(640, 360, "2");
    }
    else
    {
        draw_set_colour(c_green);

        draw_text(640, 360, "1");
    }
}
else if (obj_persistantData.m_height &gt; m_goalHeight)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fnt_very_big);
    
    if (m_endGameCountDown &gt; 1.0 &amp;&amp; m_endGameCountDown &lt; 2.0)
        draw_set_colour(c_red);
    else
        draw_set_colour(c_yellow);
    
    draw_text(540, 360, "You Win!!");
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
