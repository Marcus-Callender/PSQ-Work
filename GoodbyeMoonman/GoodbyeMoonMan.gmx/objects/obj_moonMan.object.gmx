<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_moonMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_score = 0;
m_time = 0;

m_preActive = true;
m_active = false;
m_postActive = false;
m_postVictory = false;
m_endGameTimer = 3.0;

//stops animations
image_speed = 0;

image_xscale = 0.5;
image_yscale = 0.5;

m_velocityY = 0.0;
m_velocityX = 0.0;
m_gravity = (9.81/600.0) * 5.0;

m_maxVelocityX = 10.0 * 60.0;
m_stepVelocityX = 0.50 * 60.0 * 60.0;

m_justHit = false;
m_hit = false;
m_launching = false;
m_firstLaunched = true;

m_animTimer = 0.0;
m_animSwitchTime = 0.2;

m_currentAnim = 0;
m_previousAnim = 0;

if (obj_persistantData.m_durationJetpack)
    m_jetpackTime = 5.0;
else
    m_jetpackTime = 3.0;

if (obj_persistantData.m_speedJetpack)
    m_jetpackSpeed = 7.0;
else
    m_jetpackSpeed = 5.0;

m_usingJetpack = false;

m_upgradeEffectiveness = 0.2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_usingJetpack = false;

if (m_endGameTimer &lt;= 0.0)
{
    event_user(0);
    //room_goto(rm_nameEntry);
    room_goto(rm_upgrades);
}

if(m_active || m_postActive)
{
    var decrese = m_gravity;
    //var decrese = (obj_persistantData.m_height/(obj_persistantData.m_maxHeight * 7.0)) * m_gravity;
    decrese *= (m_upgradeEffectiveness * obj_persistantData.m_moonmanWeight);
    m_velocityY -= decrese;
}
else if (m_postVictory)
{
    y -= m_velocityY * 0.4;
}

//If post active.
if (m_postActive)
{
    //End Game Timer is reduced every frame.
    m_endGameTimer -= obj_persistantData.m_deltaTime;
    //Velocity is reduced every frame.
    y -= m_velocityY;
}
//Else if active
else if (m_active)
{
    m_time += obj_persistantData.m_deltaTime;

    if (keyboard_check(ord('D')))
    {
        m_velocityX += m_stepVelocityX * obj_persistantData.m_deltaTime;
        
        if (m_velocityX &gt; m_maxVelocityX)
        {
            m_velocityX = m_maxVelocityX;
        }
    }
    
    if (keyboard_check(ord('A')))
    {
        m_velocityX -= m_stepVelocityX * obj_persistantData.m_deltaTime;
        
        if (m_velocityX &lt; -m_maxVelocityX)
        {
            m_velocityX = -m_maxVelocityX;
        }
    }
    
    if (m_velocityY &lt;= 0.0)
    {
        m_active = false;
        m_postActive = true;
    }
    
    if (!obj_persistantData.m_paused)
        obj_persistantData.m_height += m_velocityY;
    
    if (keyboard_check(vk_space) &amp;&amp; (m_jetpackTime &gt; 0.0))
    {
        m_usingJetpack = true;
        m_jetpackTime -= obj_persistantData.m_deltaTime;//0.016;
        m_velocityY += m_jetpackSpeed * obj_persistantData.m_deltaTime;
        
        instance_create(0, 0, obj_dustCloud);
        instance_create(0, 0, obj_dustCloud);
        instance_create(0, 0, obj_dustCloud);
    }
}
else if (m_preActive)
{
    if (m_launching)
    {
        m_currentAnim = 2;
    }
    else if (m_hit)
    {
        m_currentAnim = 1;
    }
    else
    {
        m_currentAnim = 0;
    }
}

//if (!obj_persistantData.m_paused)
x += m_velocityX * obj_persistantData.m_deltaTime;

if (x &gt; 1280)
{
    x = 1280;
    
    if (m_velocityX &gt; 0.0)
        m_velocityX = 0.0
}
else if (x &lt; 0)
{
    x = 0;
    
    if (m_velocityX &lt; 0.0)
        m_velocityX = 0.0
}

event_user(0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (m_currentAnim != m_previousAnim)
{
    m_animTimer = 0.0;
    
    if (m_currentAnim == 0)
    {
        image_index = 0;
    }
    else if (m_currentAnim == 1)
    {
        image_index = 2;
    }
    else if (m_currentAnim == 2)
    {
        image_index = 5;
    }
    else if (m_currentAnim == 3)
    {
        image_index = 10;
    }
    else if (m_currentAnim == 4)
    {
        image_index = 12;
    }
    
    m_previousAnim = m_currentAnim;
}

m_animTimer += obj_persistantData.m_deltaTime;

//idle
if (m_previousAnim == 0)
{
    if (m_animTimer &gt;= (m_animSwitchTime * 3))
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 1)
        {
            image_index = 0;
        }
    }
}

//being hit
if (m_previousAnim == 1)
{
    if (m_animTimer &gt;= (m_animSwitchTime * 0.5))
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 4)
        {
            image_index = 2;
            m_hit = false;
        }
    }
}

//being launched
if (m_previousAnim == 2)
{
    if (m_animTimer &gt;= 0.1)//(m_animSwitchTime * 0.5))
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 10)
        {
            //image_index = 6;
            image_index = 10;
            m_currentAnim = 3;
        }
    }
}

//flying
if (m_previousAnim == 3)
{
    if (m_animTimer &gt;= m_animSwitchTime)
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 11)
        {
            image_index = 10;
        }
    }
}

//collision
if (m_previousAnim == 4)
{
    if (m_animTimer &gt;= (m_animSwitchTime * 0.2))
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 22)
        {
            image_index = 10;
            m_currentAnim = 3;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
