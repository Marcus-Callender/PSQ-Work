<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_launcher</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_keysPressed = 0;
m_pressLeft = false;
m_countdown = 7.0;
m_countdown2 = 1.0;

m_preActive = true;
m_active = false;

m_targateX = 680.0;

m_veclcityX = 160.0;

m_animTimer = 0.0;
m_animSwitchTime = 0.2;
m_punching = false;

m_walkMin = 12;
m_walkMax = 17;

m_uppercutTime = 0.6;

image_xscale = 0.5;
image_yscale = 0.5;

image_speed = 0.0;
image_index = 12;

m_anim2 = false;

m_currentAnim = 0;
m_previousAnim = 0;

m_upgradeEffectiveness = 0.2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (m_preActive)
{
    if (x &lt; m_targateX)
    {
        x += (m_veclcityX * obj_persistantData.m_deltaTime);
        
        m_currentAnim = 4;
    }
    else
    {
        m_currentAnim = 3;
    }
}
else if (m_active)
{
    m_countdown -= obj_persistantData.m_deltaTime;
    
    show_debug_message("Score: " + string(m_keysPressed));
    
    if (m_countdown &lt;= 0.0)
    {
        if (m_countdown2 &gt; 0.0)
        {
            m_countdown2 -= obj_persistantData.m_deltaTime;
            
            if (keyboard_check_pressed(vk_space))
            {
                m_countdown2 %= 0.5;
                
                m_keysPressed += 10 + (m_countdown2 * 50.0);
            
                m_countdown2 = 0.0;
            }
        }
        else
        {
            obj_moonMan.m_launching = true;
            
            m_uppercutTime -= obj_persistantData.m_deltaTime;
            
            m_currentAnim = 2;
            
            if (m_uppercutTime &lt;= 0.0)
            {   
                with(obj_sound)
                {
                    event_user(5);
                }
                show_debug_message("END!");
                show_debug_message("Score: " + string(m_keysPressed));
                m_active = false;
                
                //obj_moonMan.m_velocityY = (m_keysPressed * 0.2);
                obj_moonMan.m_velocityY = (m_keysPressed * 0.2) + ((m_keysPressed * 0.2) * (m_upgradeEffectiveness * obj_persistantData.m_launchPower));
                obj_moonMan.m_preActive = false;
                obj_moonMan.m_active = true;
            }
        }
    }
    else
    {  
        if (keyboard_check_pressed(ord('A')))
        {
            if (m_pressLeft)
            {
                with(obj_sound) 
                {
                    event_user(irandom(3) + 2);
                }
                
                m_pressLeft = false;
                m_keysPressed++;
                m_punching = true;
                obj_moonMan.m_hit = true;
            }
        }
            
        if (keyboard_check_pressed(ord('D')))
        {
            if (not m_pressLeft)
            {
                with(obj_sound) 
                {
                    event_user(irandom(3) + 2);
                }
                
                m_pressLeft = true;
                m_keysPressed++;
                m_punching = true;
                obj_moonMan.m_hit = true;
            }
        }
        
        if(m_punching)
        {            
            if (m_anim2)
            {
               m_currentAnim = 0;
            }
            else
            {
                m_currentAnim = 1;
            }
        }
        else
        {
            m_currentAnim = 3; 
        }
        
        if (keyboard_check_pressed(ord('Z')))
        {
               m_keysPressed += 150;
               
               m_countdown = 0;
        }
    }
}
else if (obj_moonMan.m_active)
{
    y += obj_moonMan.m_velocityY;

    if (y &gt; 820)
    {
        instance_destroy();
    }
}

event_user(0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (m_currentAnim != m_previousAnim)
{
    m_animTimer = 0.0;
    
    if (m_currentAnim == 0)
    {
        image_index = 0;
    }
    else if (m_currentAnim == 1)
    {
        image_index = 3;
    }
    else if (m_currentAnim == 2)
    {
        image_index = 6;
    }
    else if (m_currentAnim == 3)
    {
        image_index = 9;
    }
    else if (m_currentAnim == 4)
    {
        image_index = 12;
    }
    
    m_previousAnim = m_currentAnim;
}

m_animTimer += obj_persistantData.m_deltaTime;

//right hand punch
if (m_previousAnim == 0)
{
    if (m_animTimer &gt;= (m_animSwitchTime * 0.5))
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 2)
        {
            image_index = 0;
            m_anim2 = false;
            m_punching = false;
        }
    }
}

//left hand punch
if (m_previousAnim == 1)
{
    if (m_animTimer &gt;= (m_animSwitchTime * 0.5))
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 5)
        {
            image_index = 3;
            m_anim2 = true;
            m_punching = false;
        }
    }
}

//uppercut animation
if (m_previousAnim == 2)
{
    if (m_animTimer &gt;= m_animSwitchTime)
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 8)
        {
            //image_index = 6;
            image_index = 8;
        }
    }
}

//idle animation
if (m_previousAnim == 3)
{
    if (m_animTimer &gt;= m_animSwitchTime)
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 11)
        {
            image_index = 9;
        }
    }
}

//walking animation
if (m_previousAnim == 4)
{
    if (m_animTimer &gt;= m_animSwitchTime)
    {
        image_index++;
        m_animTimer = 0.0;
        
        if (image_index &gt; 16)
        {
            image_index = 12;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
